openapi: 3.0.0
info:
  title: Absence Manager
  description: API for managing hei's student attendance, teachers, and courses.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: An app to manage student's absence and attendance

tags:
  - name: Students
    description: student(s) management
  - name: Teachers
    description: teacher(s) management
  - name: Courses
    description: course(s) management
  - name: Attendance
    description: attendance management
  - name: Absences
    description: absence management
  - name: Proof
    description: absence proof management

paths:
  /students:
    get:
      tags:
        - Students
      summary: Get all students
      responses:
        "200":
          description: Returns a list of all students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
        "500":
          description: Server error

  /student:
    post:
      tags:
        - Students
      summary: Add a new student
      requestBody:
        description: Student object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        "201":
          description: Student added successfully
        "400":
          description: Invalid input
        "500":
          description: Server error

  /students/{std}:
    get:
      tags:
        - Students
      summary: Get a student by STD
      parameters:
        - name: std
          in: path
          required: true
          schema:
            type: string
          description: The student's std
      responses:
        "200":
          description: Returns a student by std
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "404":
          description: Student not found
        "500":
          description: Server error

    put:
      tags:
        - Students
      summary: Update a student by STD
      parameters:
        - name: std
          in: path
          required: true
          schema:
            type: string
          description: The student's std
      requestBody:
        description: Student object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        "200":
          description: Student updated successfully
        "400":
          description: Invalid input
        "404":
          description: Student not found
        "500":
          description: Server error

    delete:
      tags:
        - Students
      summary: Delete a student by STD
      parameters:
        - name: std
          in: path
          required: true
          schema:
            type: string
          description: The student's std
      responses:
        "204":
          description: Student deleted successfully
        "404":
          description: Student not found
        "500":
          description: Server error

  /students/name/{toSearch}:
    get:
      tags:
        - Students
      summary: Search students by name
      parameters:
        - name: toSearch
          in: path
          required: true
          schema:
            type: string
          description: Student's name or part of the name to search
      responses:
        "200":
          description: Returns a list of students matching the search term
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Student"
        "404":
          description: No students found matching the name
        "500":
          description: Server error

  /teachers:
    get:
      tags:
        - Teachers
      summary: Get all teachers
      responses:
        "200":
          description: Returns a list of all teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teacher"
        "500":
          description: Server error

    post:
      tags:
        - Teachers
      summary: Add a new teacher
      requestBody:
        description: Teacher object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Teacher"
      responses:
        "201":
          description: Teacher added successfully
        "400":
          description: Invalid input
        "500":
          description: Server error

  /teacher/{id}:
    get:
      tags:
        - Teachers
      summary: Get a teacher by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The teacher's ID
      responses:
        "200":
          description: Returns a teacher by ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Teacher"
        "404":
          description: Teacher not found
        "500":
          description: Server error

    put:
      tags:
        - Teachers
      summary: Modify an existing teacher
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The teacher's ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: The teacher's first name
                lastName:
                  type: string
                  description: The teacher's last name
      responses:
        "200":
          description: Teacher modified successfully
        "400":
          description: Invalid input
        "404":
          description: Teacher not found
        "500":
          description: Server error

    delete:
      tags:
        - Teachers
      summary: Delete a teacher by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The teacher's ID
      responses:
        "204":
          description: Teacher deleted successfully
        "404":
          description: Teacher not found
        "500":
          description: Server error

  /courses:
    get:
      tags:
        - Courses
      summary: Get all courses
      responses:
        "200":
          description: Returns a list of all courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
        "500":
          description: Server error

    post:
      tags:
        - Courses
      summary: Add a new course
      requestBody:
        description: Course object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "201":
          description: Course added successfully
        "400":
          description: Invalid input
        "500":
          description: Server error

  /course/{id}:
    get:
      tags:
        - Courses
      summary: Get a course by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The course ID
      responses:
        "200":
          description: Returns a course by ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "404":
          description: Course not found
        "500":
          description: Server error

    put:
      tags:
        - Courses
      summary: Update a course by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The course ID
      requestBody:
        description: Course object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "200":
          description: Course updated successfully
        "400":
          description: Invalid input
        "404":
          description: Course not found
        "500":
          description: Server error

    delete:
      tags:
        - Courses
      summary: Delete a course by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The course ID
      responses:
        "204":
          description: Course deleted successfully
        "404":
          description: Course not found
        "500":
          description: Server error

  /attendance:
    get:
      tags:
        - Attendance
      summary: Get the attendance list of all students
      responses:
        "200":
          description: Returns the attendance list of all students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attend"
        "500":
          description: Server error

  /attendance/course:
    get:
      tags:
        - Attendance
      summary: Get students' attendance by course and date
      parameters:
        - name: courseName
          in: query
          required: true
          schema:
            type: string
          description: The course name
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: Date of attendance
      responses:
        "200":
          description: Returns a list of students' attendance for the course on the specified date
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attend"
        "500":
          description: Server error

  /attendance/{stdRef}:
    get:
      tags:
        - Attendance
      summary: Get attendance records of a student
      parameters:
        - name: stdRef
          in: path
          required: true
          schema:
            type: string
          description: The student's reference
      responses:
        "200":
          description: Returns the attendance records of the student
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attend"
        "404":
          description: Student not found
        "500":
          description: Server error

    delete:
      tags:
        - Attendance
      summary: Delete a student's attendance record
      parameters:
        - name: stdRef
          in: path
          required: true
          schema:
            type: string
          description: The student's reference
        - name: courseName
          in: query
          required: true
          schema:
            type: string
          description: The course name
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: The attendance date
      responses:
        "204":
          description: Attendance record deleted successfully
        "404":
          description: Student or record not found
        "500":
          description: Server error

  /attendance/{stdRefs}:
    put:
      tags:
        - Attendance
      summary: Update a student's attendance status
      parameters:
        - name: stdRef
          in: path
          required: true
          schema:
            type: string
          description: The student's reference
        - name: courseName
          in: query
          required: true
          schema:
            type: string
          description: The course name
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: The attendance date
        - name: newStatus
          in: query
          required: true
          schema:
            type: string
          description: The new attendance status
      responses:
        "200":
          description: Attendance status updated successfully
        "400":
          description: Invalid input
        "404":
          description: Student or record not found
        "500":
          description: Server error

  /attendance/date:
    get:
      tags:
        - Attendance
      summary: Get attendance records within a date range
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: Start date for the range
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: End date for the range
      responses:
        "200":
          description: Returns the attendance records within the specified date range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attend"
        "500":
          description: Server error

  /attendance/course/{courseName}:
    get:
      tags:
        - Attendance
      summary: Get all attendance records for a course
      parameters:
        - name: courseName
          in: path
          required: true
          schema:
            type: string
          description: The course name
      responses:
        "200":
          description: Returns all attendance records for the specified course
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attend"
        "404":
          description: Course not found
        "500":
          description: Server error

  /attendance/student:
    post:
      tags:
        - Attendance
      summary: Create a new attendance record
      requestBody:
        description: Attendance object to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attend"
      responses:
        "201":
          description: Attendance created successfully
        "400":
          description: Invalid input
        "500":
          description: Server error

  /attendance/presence:
    post:
      tags:
        - Attendance
      summary: Update student presence for a course
      parameters:
        - name: courseName
          in: query
          required: true
          schema:
            type: string
          description: The course name
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: The attendance date
      requestBody:
        description: List of absent students
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbsenceRequest"
      responses:
        "200":
          description: Presence updated successfully
        "500":
          description: Server error

  /absences:
    get:
      summary: Retrieve all student absences
      operationId: getAbsences
      tags:
        - Absences
      responses:
        "200":
          description: List of student absences
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IsAbsent"
        "500":
          description: Internal server error

  /absences/{std}:
    get:
      summary: Retrieve absences for a specific student
      operationId: getStudentAbsences
      tags:
        - Absences
      parameters:
        - name: std
          in: path
          required: true
          description: The student's identifier
          schema:
            type: string
      responses:
        "200":
          description: List of absences for the specified student
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IsAbsent"
        "404":
          description: Student not found
        "500":
          description: Internal server error

  /absences/update:
    put:
      summary: Update COR status for students with 3 or more unjustified absences
      operationId: updateCORStatus
      tags:
        - Absences
      responses:
        "204":
          description: COR status updated successfully
        "500":
          description: Internal server error


  /proofs:
    get:
      summary: Retrieve a list of proofs
      operationId: readProofList
      tags:
        - Proof
      responses:
        '200':
          description: A list of proofs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proof'

   
  /proofs/delete:
    delete:
      summary: Delete a proof by details
      operationId: deleteProofByDetails
      tags:
        - Proof
      parameters:
        - name: std
          in: query
          required: true
          description: The student ID
          schema:
            type: string
        - name: courseName
          in: query
          required: true
          description: The course name
          schema:
            type: string
        - name: date
          in: query
          required: true
          description: The date of the proof
          schema:
            type: string
            format: date-time
      responses:
        '204':
          description: Proof deleted successfully
        '404':
          description: Proof not found

  /proofs/{std}:
    get:
      summary: Retrieve a specific proof by student ID, course name, and date
      operationId: getOneProof
      tags:
        - Proof
      parameters:
        - name: std
          in: path
          required: true
          description: The student ID
          schema:
            type: string
        - name: courseName
          in: query
          required: true
          description: The course name
          schema:
            type: string
        - name: date
          in: query
          required: true
          description: The date of the proof
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: The requested proof
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proof'
        '404':
          description: Proof not found

components:
  schemas:
    Student:
      type: object
      properties:
        std:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        group:
          type: string
        corstatus:
          type: boolean

    Teacher:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        teacherRef:
          type: integer

    Course:
      type: object
      properties:
        courseId:
          type: integer
        courseName:
          type: string

    Attend:
      type: object
      properties:
        stdRef:
          type: string
        courseName:
          type: string
        date:
          type: string
          format: date-time
        presenceStatus:
          type: string
          description: Attendance status (e.g., present, absent)

    AbsenceRequest:
      type: object
      properties:
        absentStudents:
          type: array
          items:
            type: string
          description: List of absent students' references
    IsAbsent:
      type: object
      properties:
        studentId:
          type: string
          description: The ID of the student
        isJustified:
          type: boolean
          description: Whether the absence is justified or not
        absenceDate:
          type: string
          format: date-time
          description: Date and time of the absence
        proofReason:
          type: string
          nullable: true
          description: Reason for the proof of absence
        proofDate:
          type: string
          format: date-time
          nullable: true
          description: Date and time when the proof was provided
        CORStatus:
          type: boolean
          description: COR status of the student
        courseName:
          type: string
          description: Name of the course during which the absence occurred
      required:
        - studentId
        - isJustified
        - absenceDate
        - CORStatus
        - courseName
    Proof:
      type: object
      properties:
        proofId:
          type: integer
          example: 1
        std:
          type: string
          example: "STD123"
        courseName:
          type: string
          example: "Mathematics"
        date:
          type: string
          format: date-time
          example: "2023-09-23T10:15:30"
        reason:
          type: string
          example: "Sick leave"
